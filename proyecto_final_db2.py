# -*- coding: utf-8 -*-
"""Proyecto Final - Db2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBMfYg8X7xvio_Yxo5eDk41A-ZrMCQJH

## Access DB2 on Cloud using Python
"""

!pip install --upgrade ibm_db
!pip install --upgrade ibm_db_sa
!pip install --upgrade SQLAlchemy
import ibm_db
import ibm_db_sa
import sqlalchemy

#Identifica las claves de acceso para conectarse a la base de datos:
dsn_hostname = "fbd88901-ebdb-4a4f-a32e-9822b9fb237b.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud"  # El hostname de tu base de datos
dsn_uid = "wtm13096"  # Tu nombre de usuario para la base de datos
dsn_pwd = "R9OofrMKIorYnca1"  # Tu contraseña para la base de datos
dsn_driver = "{IBM DB2 ODBC DRIVER}"  # El controlador ODBC de IBM DB2, asegúrate de tenerlo instalado
dsn_database = "bludb"  # El nombre de tu base de datos
dsn_port = 32731  # El puerto de tu base de datos
dsn_protocol = "TCPIP"  # El protocolo de conexión, comúnmente utilizado es TCP/IP
dsn_security = "SSL"  # El nivel de seguridad, en este caso, SSL

#Create database connection
#DO NOT MODIFY THIS CELL. Just RUN it with Shift + Enter
dsn = (
    "DRIVER={0};"
    "DATABASE={1};"
    "HOSTNAME={2};"
    "PORT={3};"
    "PROTOCOL={4};"
    "UID={5};"
    "PWD={6};"
    "SECURITY={7};").format(dsn_driver, dsn_database, dsn_hostname, dsn_port, dsn_protocol, dsn_uid, dsn_pwd,dsn_security)

try:
    conn = ibm_db.connect(dsn, "", "")
    print ("Connected to database: ", dsn_database, "as user: ", dsn_uid, "on host: ", dsn_hostname)

except:
    print ("Unable to connect: ", ibm_db.conn_errormsg() )

ibm_db.close(conn)

#Recuperar los Metadatos para la Servidor de Base de Datos
server = ibm_db.server_info(conn)

print ("DBMS_NAME: ", server.DBMS_NAME)
print ("DBMS_VER:  ", server.DBMS_VER)
print ("DB_NAME:   ", server.DB_NAME)

#Recuperar los Metadatos para la Base de Datos Cliente / Driver
client = ibm_db.client_info(conn)

print ("DRIVER_NAME:          ", client.DRIVER_NAME)
print ("DRIVER_VER:           ", client.DRIVER_VER)
print ("DATA_SOURCE_NAME:     ", client.DATA_SOURCE_NAME)
print ("DRIVER_ODBC_VER:      ", client.DRIVER_ODBC_VER)
print ("ODBC_VER:             ", client.ODBC_VER)
print ("ODBC_SQL_CONFORMANCE: ", client.ODBC_SQL_CONFORMANCE)
print ("APPL_CODEPAGE:        ", client.APPL_CODEPAGE)
print ("CONN_CODEPAGE:        ", client.CONN_CODEPAGE)

"""## Consulta de tablas:

"""

import pandas
import ibm_db_dbi
#conexión con pandas
pconn = ibm_db_dbi.Connection(conn)
#Declaración para devolver todas las filas de la tabla CHICAGO_CRIME_DATA
selectQuery = "select * from CHICAGO_CRIME_DATA"

#devolver los resultados de la busqueda dentro de un dataframe pandas
pdf = pandas.read_sql(selectQuery, pconn)
pdf

pdf.describe()

#Declaración para devolver todas las filas de la tabla CENSUS_DATA
selectQuery = "select * from CENSUS_DATA"

#devolver los resultados de la busqueda dentro de un dataframe pandas
censo = pandas.read_sql(selectQuery, pconn)
censo

#Declaración para devolver todas las filas de la tabla CHICAGO_PUBLIC_SCHOOLS
selectQuery = "select * from CHICAGO_PUBLIC_SCHOOLS "

#devolver los resultados de la busqueda dentro de un dataframe pandas
esc = pandas.read_sql(selectQuery, pconn)
esc

"""##      EJERCICIOS:

# CHICAGO_CRIME_DATA
"""

# Problema 1: Encuentre el número total de delitos registrados en la tabla de delitos.
# Encuentra el numero total de crímenes almacenados en la tabla CHICAGO_CRIME_DATA
#SELECT nombre_de_la_tabla

selectQuery = "select COUNT(DISTINCT CASE_NUMBER) FROM CHICAGO_CRIME_DATA"
#Ejecutar la sentencia
Query = ibm_db.exec_immediate(conn, selectQuery)
# Obtener el resultado de la consulta
result = ibm_db.fetch_both(Query)
# Mostrar el número total de crímenes
print("Número total de crímenes almacenados en la tabla CHICAGO_CRIME_DATA:", result[0])

# Problema 2: recupere las primeras 10 filas de la tabla CRIME.

selectQuery = "SELECT * FROM CHICAGO_CRIME_DATA LIMIT 10"
#Ejecutar la sentencia
Query = ibm_db.exec_immediate(conn, selectQuery)
# Obtener el resultado de la consulta
result = ibm_db.fetch_both(Query)
#devolver los resultados de la busqueda dentro de un dataframe pandas
result = pandas.read_sql(selectQuery, pconn)
result

# Problema 3: ¿Cuántos delitos implican un arresto?
selectQuery = "SELECT COUNT(ARREST) FROM CHICAGO_CRIME_DATA WHERE ARREST = 'VERDADERO'"
#Ejecutar la sentencia
Query = ibm_db.exec_immediate(conn, selectQuery)
# Obtener el resultado de la consulta
result = ibm_db.fetch_both(Query)
print("Los delitos que implicaron un arresto en la tabla CHICAGO_CRIME_DATA son un total de:", result[0])

# Problema 4: ¿Qué tipos únicos de delitos (por ejemplo, ROBO) se han registrado en las ubicaciones de una ESTACIÓN DE GAS?

# Definir la consulta para tipos únicos de delitos en una ESTACIÓN DE GAS
selectQuery = "SELECT DISTINCT PRIMARY_TYPE FROM CHICAGO_CRIME_DATA WHERE LOCATION_DESCRIPTION = 'GAS STATION'"

# Ejecutar la consulta
Query = ibm_db.exec_immediate(conn, selectQuery)

# Obtener el resultado de la consulta
print("Tipos únicos de delitos en ubicaciones de una ESTACIÓN DE GAS:")
result = ibm_db.fetch_both(Query)
while result:
    print(result['PRIMARY_TYPE'])
    result = ibm_db.fetch_both(Query)

"""# CENSUS_DATA"""

# Problema 5: En la tabla CENSUS_DATA enumere todas las áreas de la comunidad cuyos nombres comiencen con la letra "B":
selectQuery = "SELECT COMMUNITY_AREA_NAME FROM CENSUS_DATA WHERE COMMUNITY_AREA_NAME LIKE 'B%'"

# Ejecutar la consulta
Query = ibm_db.exec_immediate(conn, selectQuery)

# Obtener los resultados de la consulta
print("Las áreas de la ciudad que comienzan con 'B':")
result = ibm_db.fetch_both(Query)
while result:
    print(result['COMMUNITY_AREA_NAME'])
    result = ibm_db.fetch_both(Query)

"""# CHICAGO_PUBLIC_SCHOOLS"""

# Problema 6: Enumere las escuelas en las áreas comunitarias 10 a 15 que están certificadas como escuelas saludables:

selectQuery = "SELECT NAME_OF_SCHOOL FROM CHICAGO_PUBLIC_SCHOOLS WHERE COMMUNITY_AREA_NUMBER BETWEEN 10 AND 15 AND HEALTHY_SCHOOLS_CERTIFIED_ = 'Yes'"

# Ejecutar la consulta
Query = ibm_db.exec_immediate(conn, selectQuery)

# Obtener los resultados de la consulta
print("Las escuelas que se encuentran en las áreas comunitarias entre 10 y 15 donde su certificado sea saludable:")
result = ibm_db.fetch_both(Query)
while result:
    print(result['NAME_OF_SCHOOL'])
    result = ibm_db.fetch_both(Query)

# Problema 7: ¿Cuál es el puntaje promedio de seguridad escolar?

# Definir la consulta para obtener el puntaje promedio de seguridad escolar
selectQuery = "SELECT AVG(SAFETY_SCORE) AS AVERAGE_SAFETY_SCORE FROM CHICAGO_PUBLIC_SCHOOLS"

# Ejecutar la consulta
Query = ibm_db.exec_immediate(conn, selectQuery)

# Obtener los resultados de la consulta
print("El puntaje promedio de seguridad escolar:")
result = ibm_db.fetch_both(Query)
if result:
    print(result['AVERAGE_SAFETY_SCORE'])
else:
    print("No se encontraron datos.")

# Problema 8: Encuentre las 5 áreas comunitarias principales por matrícula universitaria promedio [número de estudiantes]
selectQuery = """
SELECT COMMUNITY_AREA_NAME, AVG(COLLEGE_ENROLLMENT__NUMBER_OF_STUDENTS_) AS COLLEGE_ENROLLMENT
FROM CHICAGO_PUBLIC_SCHOOLS
GROUP BY COMMUNITY_AREA_NAME
ORDER BY COLLEGE_ENROLLMENT DESC
FETCH FIRST 5 ROWS ONLY
"""
# Ejecutar la consulta
Query = ibm_db.exec_immediate(conn, selectQuery)
# Obtener los resultados de la consulta
print("Las 5 áreas comunitarias principales por matrícula universitaria promedio:")
result = ibm_db.fetch_both(Query)
while result:
    print(f"{result['COMMUNITY_AREA_NAME']}: {result['COLLEGE_ENROLLMENT']}")
    result = ibm_db.fetch_both(Query)

# Problema 9: Utilice una subconsulta para determinar qué área comunitaria tiene el menor valor para la puntuación de seguridad escolar

selectQuery = """
SELECT COMMUNITY_AREA_NAME, SAFETY_SCORE
FROM CHICAGO_PUBLIC_SCHOOLS
WHERE SAFETY_SCORE = (
    SELECT MIN(SAFETY_SCORE)
    FROM CHICAGO_PUBLIC_SCHOOLS
)
"""

# Ejecutar la consulta
Query = ibm_db.exec_immediate(conn, selectQuery)

# Obtener los resultados de la consulta
print("El área comunitaria con el menor valor para la puntuación de seguridad escolar:")
result = ibm_db.fetch_both(Query)
while result:
    print(f"Community Area: {result['COMMUNITY_AREA_NAME']}, Safety Score: {result['SAFETY_SCORE']}")
    result = ibm_db.fetch_both(Query)

# Problema 10: [Sin utilizar un operador JOIN explícito] Encuentre el ingreso per cápita del área comunitaria que tiene una puntuación de seguridad escolar de 1.

# Definir la consulta para obtener el ingreso per cápita del área comunitaria con puntuación de seguridad escolar de 1
selectQuery = "SELECT PER_CAPITA_INCOME FROM CENSUS_DATA WHERE COMMUNITY_AREA_NAME = 'Washington Park'"
# Ejecutar la consulta
Query = ibm_db.exec_immediate(conn, selectQuery)

# Obtener los resultados de la consulta
result = ibm_db.fetch_both(Query)
print("El ingreso per cápita del área comunitaria con la puntuación de seguridad escolar de 1 es:", result[0])